* 1D Advection Equation
** Description
Consider the 1D advection equation,
$$u_t + a u_x = 0$$
defined on the domain $[a,b]$

With periodic boundary conditions, that is,
$$u(x+1,t) = u(x,t)$$
** Discretization
Partition the domain into $N$ points, such that
$$x_i = i \Delta x$$
where, $\Delta x$ is the partition size defined as,
$$\Delta x = \frac{b - a}{N-1}$$
The time is partitioned so that,
$$t_n = n \Delta t$$
Where $\Delta t$ is the time interval

Let $U_i^n$ be the approximation to the function $u$, that is,
$$U_i^n \approx u(x_i,t_n)$$

By the finite difference method the time derivative is approximated using a forward difference scheme.
$$\frac{\partial}{\partial t} u(x_i,t) \bigg|_{t=t_n} \Rightarrow \frac{U_i^{n+1} - U_i^n}{\Delta t}$$
The space derivative can be approximated in three different schemes:
*** Forward Difference
**** Description
$$\frac{\partial}{\partial x} u(x,t_n) \bigg|_{x=x_i} \Rightarrow \frac{U_{i+1}^{n+1} - U_i^n}{\Delta x}$$
Thus we get,
$$\frac{U_i^{n+1} - U_i^n}{\Delta t} + a \frac{U_{i+1}^{n+1} - U_i^n}{\Delta x} = 0$$
Define,
$$\sigma = \frac{a \Delta t}{\Delta x}$$
Rearranging we get,
$$U_i^{n+1} = \left( 1 + \sigma \right) U_i^n - \sigma U_{i+1}^n$$
where,
$$i=0,1,\ldots,N-2 \qquad n = 0,1,2,\ldots$$
With the periodic boundary condition we define,
$$U_{N-1}^{n+1} = \left( 1 + \sigma \right) U_{N-1}^n - \sigma U_{1}^n$$
**** Stability

Using Fourier Analysis we get, the solution
$$U_i^n = \beta^n e^{i l x_i}$$
Substituting in the scheme we get,
$$\beta^{n+1} e^{i l x_i} = \left( 1 + \sigma \right) \beta^n e^{i l x_i} - \sigma \beta^n e^{i l x_{i+1}}$$
Thus,
$$\beta = 1 + \sigma - \sigma e^{i l \Delta x}$$
Clearly, $\lvert \beta \rvert > 1$. Hence, the forward difference scheme is unconditionally unstable.
*** Backward Difference
**** Description
$$\frac{\partial}{\partial x} u(x,t_n) \bigg|_{x=x_i} \Rightarrow \frac{U_i^{n+1} - U_{i-1}^n}{\Delta x}$$
Thus we get,
$$\frac{U_i^{n+1} - U_i^n}{\Delta t} + a \frac{U_i^{n+1} - U_{i-1}^n}{\Delta x} = 0$$
Define,
$$\sigma = \frac{a \Delta t}{\Delta x}$$
Rearranging we get,
$$U_i^{n+1} = \left( 1 - \sigma \right) U_i^n + \sigma U_{i-1}^n$$
where,
$$i=1,2,\ldots,N-1 \qquad n = 0,1,2,\ldots$$
With the periodic boundary condition we define,
$$U_{0}^{n+1} = \left( 1 - \sigma \right) U_{0}^n + \sigma U_{N-2}^n$$
**** Stability

Using Fourier Analysis we get, the solution
$$U_i^n = \beta^n e^{i l x_i}$$
Substituting in the scheme we get,
$$\beta^{n+1} e^{i l x_i} = \left( 1 - \sigma \right) \beta^n e^{i l x_i} + \sigma \beta^n e^{i l x_{i-1}}$$
Thus,
$$\beta = 1 - \sigma + \sigma e^{- i l \Delta x}$$
$$\beta = 1 - \sigma + \sigma cos(l \Delta x) - i \sigma sin(l \Delta x)$$
$$\lvert \beta \rvert = 1 + 2 \sigma \left( \sigma -1 \right) \left( 1 - cos(l \Delta x) \right)$$
$\lvert \beta \rvert < 1$ only when $\sigma < 1$. Hence the bacward difference scheme is stable only when $\sigma < 1$.
*** Central Difference
**** Description
$$\frac{\partial}{\partial x} u(x,t_n) \bigg|_{x=x_i} \Rightarrow \frac{U_{i+1}^{n+1} - U_{i-1}^n}{\Delta x}$$
Thus we get,
$$\frac{U_i^{n+1} - U_i^n}{\Delta t} + a \frac{U_{i+1}^{n+1} - U_{i-1}^n}{\Delta x} = 0$$
Define,
$$\sigma = \frac{a \Delta t}{\Delta x}$$
Rearranging we get,
$$U_i^{n+1} = U_i^n - \frac{\sigma}{2} U_{i+1}^n + \frac{\sigma}{2} U_{i-1}^n$$
where,
$$i=1,2,\ldots,N-2 \qquad n = 0,1,2,\ldots$$
With the periodic boundary condition we define,
$$U_0^{n+1} = U_0^n - \frac{\sigma}{2} U_{1}^n + \frac{\sigma}{2} U_{N-2}^n$$
$$U_{N-1}^{n+1} = U_{N-1}^n - \frac{\sigma}{2} U_{1}^n + \frac{\sigma}{2} U_{N-2}^n$$
**** Stability

Using Fourier Analysis we get, the solution
$$U_i^n = \beta^n e^{i l x_i}$$
Substituting in the scheme we get,
$$\beta^{n+1} e^{i l x_i} = \beta^n e^{i l x_i} - \frac{\sigma}{2} \beta^n e^{i l x_{i+1}} + \frac{\sigma}{2} \beta^{n} e^{i l x_{i-1}}$$
Thus,
$$\beta = 1 - \sigma/2 e^{i l \Delta x} + \sigma/2 e^{- i l \Delta x}$$
$$\lvert \beta \rvert = 1 + \sigma^{2} \sin^{2} (l \Delta x)$$
Clearly, $\lvert \beta \rvert > 1$. Hence, the central difference scheme is unconditionally unstable.

But $\beta$ is close to one if $\sigma < 1$, meaning the solution slowly grows in amplitude for $\sigma < 1$
** Implementation
#+BEGIN_SRC c++
#include <iostream>
#include <vector>
#+END_SRC

*** Forward Difference
#+BEGIN_SRC c++
// This method returns the current state of the solution after n time steps
vector<double> nsol(const int n, const double sigma, const vector<double> &u)
{
    int size = u.size();
    vector<double> u_prev(size,0.0);
    u_prev = u;
    vector<double> u_next(size,0.0);
    for(unsigned int k=0;k<n;k++)
    {
        u_next[size-1] = (1+sigma)*u_prev[size-1] - sigma*u_prev[1];
        for(unsigned int i=0;i<size-1;i++)
        {
            u_next[i] = (1+sigma)*u_prev[i] - sigma*u_prev[i+1];
        }
        u_prev = u_next;
    }
    return u_next;
}
#+END_SRC
*** Backward Difference
#+BEGIN_SRC c++
// This method returns the current state of the solution after n time steps
vector<double> nsol(const int n, const double sigma, const vector<double> &u)
{
    int size = u.size();
    vector<double> u_prev(size,0.0);
    u_prev = u;
    vector<double> u_next(size,0.0);
    for(unsigned int k=0;k<n;k++)
    {
        u_next[0] = (1-sigma)*u_prev[0] + sigma*u_prev[size-2];
        for(unsigned int i=1;i<size;i++)
        {
            u_next[i] = (1-sigma)*u_prev[i] + sigma*u_prev[i-1];
        }
        u_prev = u_next;
    }
    return u_next;
}
#+END_SRC
*** Central Difference
#+BEGIN_SRC c++
// This method returns the current state of the solution after n time steps
vector<double> nsol(const int n, const double sigma, const vector<double> &u)
{
    int size = u.size();
    vector<double> u_prev(size,0.0);
    u_prev = u;
    vector<double> u_next(size,0.0);
    for(unsigned int k=0;k<n;k++)
    {
        u_next[size-1] = u_prev[size-1] - (sigma/2)*u_prev[1] + (sigma/2)*u_prev[size-2];
        u_next[0] = u_prev[0] - (sigma/2)*u_prev[1] + (sigma/2)*u_prev[size-2];
        for(unsigned int i=1;i<size-1;i++)
        {
            u_next[i] = u_prev[i] - (sigma/2)*u_prev[i+1] + (sigma/2)*u_prev[i-1];
        }
        u_prev = u_next;
    }
    return u_next;
}
#+END_SRC
